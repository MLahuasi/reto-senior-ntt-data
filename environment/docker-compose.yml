services:
  cliente-db:
    image: postgres:15.3
    container_name: cliente-db
    restart: always
    environment:
      POSTGRES_DB: clientesdb
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
    volumes:
      - cliente-data:/var/lib/postgresql/data
      - ./db/init/cliente/BaseDatos.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL","pg_isready -U user -d clientesdb"]
      interval: 5s
      retries: 5
    networks:
      - backend            

  cuenta-db:
    image: postgres:15.3
    container_name: cuenta-db
    restart: always
    environment:
      POSTGRES_DB: cuentasdb
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
    volumes:
      - cuenta-data:/var/lib/postgresql/data
      - ./db/init/cuenta/BaseDatos.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5435:5432"
    healthcheck:
      test: ["CMD-SHELL","pg_isready -U user -d cuentasdb"]
      interval: 5s
      retries: 5  
    networks:
      - backend          

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: pass
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 5s
      retries: 5
    volumes:
      - rabbit-data:/var/lib/rabbitmq
    networks:
      - backend      

  # ———————————————— Microservicio cliente-service ————————————————
  cliente-service:
    build:
      context: ../cliente-service       # ruta relativa al docker-compose
      dockerfile: Dockerfile
    container_name: cliente-service
    ports:
      - "8081:8081"
    env_file:
      - ../cliente-service/.env        # carga tus constantes
    # para que apunte al contenedor DB y Rabbit correctos:
    environment:
      CLIENTE_DATASOURCE_URL: jdbc:postgresql://cliente-db:5432/clientesdb
      CLIENTE_DATASOURCE_USERNAME: user
      CLIENTE_DATASOURCE_PASSWORD: pass      
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: user
      RABBITMQ_PASSWORD: pass
      CLIENTE_SERVICE_SERVER_PORT: 8081
      CLIENTE_SERVICE_SERVLET_CONTEXT_PATH: /api/v1
      CUENTA_SERVICE_URL: http://cuenta-service:8082
    depends_on:
      cliente-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - backend  

  # ———————————————— Microservicio cuenta-service ————————————————
  cuenta-service:
    build:
      context: ../cuenta-service
      dockerfile: Dockerfile
    container_name: cuenta-service
    ports:
      - "8082:8082"
    env_file:
      - ../cuenta-service/.env
    environment:
      CUENTA_DATASOURCE_URL: jdbc:postgresql://cuenta-db:5432/cuentasdb
      CUENTA_DATASOURCE_USERNAME: user
      CUENTA_DATASOURCE_PASSWORD: pass
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: user
      RABBITMQ_PASSWORD: pass
      CUENTA_SERVICE_SERVER_PORT: 8082
      CUENTA_SERVICE_SERVLET_CONTEXT_PATH: /api/v1
      CLIENTE_SERVICE_URL: http://cliente-service:8081
    depends_on:
      cuenta-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - backend      

volumes:
  cliente-data:
  cuenta-data:
  rabbit-data:

networks:
  backend:

